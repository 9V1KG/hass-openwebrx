# Automation examples for OpenWebRX. Alerts based on call sign (example 1)
# Locator grid (example 2) and frequency (example 3). Change your tts service
# using your actual target and media_player_entity_id.

# Example 1 for an alert when a 9V1 (Singapore) Station is active (was decoded)
alias: "Alert: WebRX 9V1 station active"
description: Alert when there is activity from 9V1 station
trigger:
  - platform: template
    value_template: >-
      {{( state_attr('sensor.openwebrx_ft8','callsign') |truncate(3,true,'',0))
      == '9V1'}}
    id: activity-9v1
condition:
  - condition: template
    value_template: "{{(call) != '9V1KG' }}"
action:
  - variables:
      call_spelled: |
        {% from 'macros.jinja' import spell %} {{ spell(call) }}
      loc_spelled: |
        {% from 'macros.jinja' import spell %} {{ spell(loc[0] + loc[1]) }}
  - service: notify.notiy
    data:
      message: >
        Singapore station {{ call }} active on {{ states('sensor.openwebrx_ft8')
        | int //1000 }} MHz.
      title: OpenWebRX
    enabled: true
  - service: tts.speak
    target:
      entity_id: tts.home_assistant_cloud
    data:
      cache: true
      message: >
        Singapore station with the call sign {{ call_spelled }} is active on {{
        states('sensor.openwebrx_ft8') | int //1000 }} Megahertz.
    enabled: true
  - delay:
      hours: 0
      minutes: 5
      seconds: 0
      milliseconds: 0
variables:
  call: |
    {{ state_attr('sensor.openwebrx_ft8','callsign') }}
  loc: |
    {{ state_attr('sensor.openwebrx_ft8','locator') }}
mode: single

# Example 2: Activity from Antarctica
alias: "Alert1: WebRX Antarctica active"
description: Alert when there is activity from Antarctica
trigger:
  - platform: template
    value_template: |-
      {# Second letter of the locator field #}
      {% set ltrs = ['A','B','C','D'] %}
      {{ (state_attr('sensor.openwebrx_ft8','locator') | list)[1] in ltrs }}
    id: Activity-Antarctica
condition: []
action:
  - variables:
      call_spelled: >
        {% from 'macros.jinja' import spell %} {{
        spell(states('sensor.webrx_ft8_callsign')) }}
      loc_spelled: >
        {% from 'macros.jinja' import spell %} {{
        spell(state_attr('sensor.openwebrx_ft8','locator')[0] +
        state_attr('sensor.openwebrx_ft8','locator')[1]) }}
  - service: notify.notify
    data:
      message: >
        Antarctica station with call sign {{ states('sensor.webrx_ft8_callsign')
        }}  at locator field {{ state_attr('sensor.openwebrx_ft8','locator') }} 
        was decoded on {{(states('sensor.openwebrx_ft8')| int //1000) }} MHz.
      title: OpenWebRX
    enabled: true
  - service: tts.speak
    target:
      entity_id: tts.home_assistant_cloud
    data:
      cache: true
      message: >
        Antarctica station with call sign {{ call_spelled }} at locator field {{
        loc_spelled }} was decoded on {{(states('sensor.openwebrx_ft8')| int
        //1000)}} Megahertz.
      media_player_entity_id: media_player.living_room_2
  - delay:
      hours: 0
      minutes: 5
      seconds: 0
      milliseconds: 0
    enabled: true
mode: single

# Example 3: Activity on 6 m band, not 9V1 station
alias: "Alert1: WebRX activity 6 m"
description: Alert when there is FT-8 activity on 6 m from a non 9V1 station
trigger:
  - platform: template
    value_template: >-
      {# Activity on 6 m but not a 9V1 station #} 
      {{
         ((state_attr('sensor.openwebrx_ft8','freq') //1000000) == 50 ) and 
         ((states('sensor.webrx_ft8_min_ago') | int) < 1) and
         ((states('sensor.webrx_ft8_callsign')| truncate(3,true,'',0)) != '9V1') 
      }}
    id: Activity-6m
condition: []
action:
  - variables:
      call_spelled: >
        {% from 'macros.jinja' import spell %} {{
        spell(states('sensor.webrx_ft8_callsign')) }}
      loc_spelled: >
        {% from 'macros.jinja' import spell %} {{
        spell(state_attr('sensor.openwebrx_ft8','locator')[0] +
        state_attr('sensor.openwebrx_ft8','locator')[1]) }}
  - service: notify.notify
    data:
      message: |
        Notification: 
        {{ states('sensor.webrx_ft8_callsign') }} at locator 
        {{ state_attr('sensor.openwebrx_ft8','locator') }} decoded on 6 m!"
      title: OpenWebRX
    enabled: true
  - service: tts.speak
    target:
      entity_id: tts.home_assistant_cloud
    data:
      cache: true
      message: >
        The six meter band seems open, the station {{ call_spelled }} 
        at locator field {{ loc_spelled }} was decoded just now!
      media_player_entity_id: media_player.living_room_2
  - delay:
      hours: 0
      minutes: 5
      seconds: 0
      milliseconds: 0
    enabled: true
mode: single

# Example 4: Activity by a specific call sign, which is in a variable call sign list.
# Requires Helper 'input_text.call_sign_list', macro 'spell',Text to Speech entity 
# ('tts.home_assistant_cloud') and media player entity ('media_player.living_room_2')
alias: "Alert: WebRX callsign list"
description: Alert when there is activity from 9V1 station
trigger:
  - platform: template
    value_template: |-
      {% set calls = (states('input_text.call_sign_list')).split(',') %}
      {{ state_attr('sensor.webrx_ft8','callsign') | upper in calls | trim }}
    id: in-callsign-list
condition: []
action:
  - variables:
      call_spelled: >
        {% from 'macros.jinja' import spell %} {{
        spell(state_attr('sensor.webrx_ft8','callsign')) }}
      loc_spelled: >
        {% from 'macros.jinja' import spell %} {{
        spell(state_attr('sensor.openwebrx_ft8','locator')[0] +
        state_attr('sensor.openwebrx_ft8','locator')[1]) }}
  - service: notify.notify
    data:
      message: >
        Station from call sign list {{ states('sensor.webrx_ft8_callsign') }} 
        is active on {{ states('sensor.openwebrx_ft8') | int //1000 }} MHz.
      title: OpenWebRX
    enabled: true
  - service: tts.speak
    target:
      entity_id: tts.home_assistant_cloud
    data:
      cache: true
      message: >
        Station from the call sign list, {{ call_spelled }} is active on {{
        states('sensor.openwebrx_ft8') | int //1000 }} Megahertz.        
      media_player_entity_id: media_player.living_room_2
    enabled: true
  - delay:
      hours: 0
      minutes: 5
      seconds: 0
      milliseconds: 0
mode: single
