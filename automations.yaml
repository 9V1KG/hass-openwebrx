# Automation examples for OpenWebRX. Alerts based on call sign (example 1)
# Locator grid (example 2) and frequency (example 3). Change your tts service
# using your actual target and media_player_entity_id.

# Example 1 for an alert when a 9V1 (Singapore) Station is active (was decoded)
alias: "Alert: WebRX 9V1 station active"
description: Alert when there is activity from 9V1 station
trigger:
  - platform: template
    value_template: >-
      {{( state_attr('sensor.openwebrx_ft8','callsign') |truncate(3,true,'',0))
      == '9V1'}}
    id: activity-9v1
condition:
  - condition: template
    value_template: "{{(call) != '9V1KG' }}"
action:
  - variables:
      call_spelled: |
        {% from 'macros.jinja' import spell %} {{ spell(call) }}
      loc_spelled: |
        {% from 'macros.jinja' import spell %} {{ spell(loc[0] + loc[1]) }}
      freq: |
        {{ states('sensor.openwebrx_ft8') | int //1000 }}
  - service: notify.notiy
    data:
      message: >
        Singapore station {{ call }} active on {{ freq }} MHz.
      title: OpenWebRX
    enabled: true
  - service: tts.speak
    target:
      entity_id: tts.home_assistant_cloud
    data:
      cache: true
      message: >
        Singapore station with the call sign {{ call_spelled }} 
        is active on {{ freq }} Megahertz.
      media_player_entity_id: media_player.living_room_2
    enabled: true
  - delay:
      hours: 0
      minutes: 5
      seconds: 0
      milliseconds: 0
variables:
  call: |
    {{ state_attr('sensor.openwebrx_ft8','callsign') }}
  loc: |
    {{ state_attr('sensor.openwebrx_ft8','locator') }}
mode: single
