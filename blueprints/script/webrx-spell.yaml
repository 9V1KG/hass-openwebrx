blueprint:
  name: WebRX-spell
  description: Spoken anouncements of WebRX alarms using TTS
  domain: script
  input:
    webrx_ft8:
      name: webrx-ft8
      description: Select the WebRX MQTT sensor OpenWebRX-FT8
      selector:
        entity:
          filter:
            - domain: sensor  
            
    tts-entity:
      name: tts-entity
      description: Select available tts entity like 'tts.home_assistant_cloud'
      selector:
        entity:
          filter:
            - domain: tts  

    media-play:
      name: media-player
      description: Select your available media player
      selector:
        entity:
          filter:
            - domain: media_player

variables:
  act_ft8:  !input webrx_ft8

alias: Spell Test
sequence:
  - variables:
      call_spelled: |
        {% from 'macros.jinja' import spell %}
        {{ spell(state_attr(act_ft8, 'callsign')) }}
      loc_spelled: |
        {% from 'macros.jinja' import spell %}
        {{ spell( (state_attr(act_ft8, 'locator'))[0] +
                  (state_attr(act_ft8, 'locator'))[0]   
                ) }}   
      freq: |
        {{ states(act_ft8) | int // 1000 }}
      msg_data: |
        The amateur radio station with the call sign {{ call_spelled }}, 
        in locator field {{ loc_spelled }},
        is active on {{ freq }} Mega Hertz.
  - service: tts.speak
    target:
      entity_id: !input tts-entity
    data:
      cache: true
      message: >
       {{ msg_data }}        
      media_player_entity_id: !input media-play
icon: mdi:radio-tower
mode: single
