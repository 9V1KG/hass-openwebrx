# Blueprint meta data
blueprint:
  name: WebRX-callsign-alert
  description: >
    # OpenWebRX Callsign Alert 
       
    This blueprint allows a notification and an optional spoken anouncement, when a specific call sign from an
    input text call sign list was decoded in FT-8. For the call sign list you need to define and use an input_text Helper. 
    Call signs need to be input separated by a comma and a space, like for example "`7Q4AM, 8Q7EC, ...`". AN additional 
    input text helper stores the recent call sign already announced to avoid repeating announcements. Announcements of
    the same call sign omn the samen frequency band every half an hour.
    The blueprint requires the **OpenWebRX Integration** using MQTT and Rest sensors.  
    
    
    **Note:** If you select *Spoken Announcement*, you need to install another blueprint script **`spoken-announcement`** and the
    file **`macros.jinja`** first.
    For a comlpete description please see `hass-openwebrx` on [Github](https://github.com/9V1KG/hass-openwebrx/).
    
  source_url: https://github.com/9V1KG/hass-openwebrx/blob/b924e57d9e380f9e93384e5fdfa00bbc3334dc77/blueprints/automation/webrx-callsign-alert.yaml
  domain: automation
  author: 9V1KG Klaus

  input:
    webrx_ft8:
      name: OpenWebRX FT-8 MQTT sensor
      description: Select the WebRX MQTT sensor, default is **`OpenWebRX-FT8`**.
      selector:
        entity:
          filter:
            - domain: sensor  

    callsign_list:
      name: Call sign list
      description: "Select the text field helper 'call-sign-list' containing the call signs, separated by comma."
      selector:
        entity:
          filter:
            - domain: input_text

    last_call:
      name: Last call sign announced
      description: >
        Helper input text field to avoid too frequent announcements of the same call sign on the same band.
        Recent call sign and freq in MHz are stored, e.g. 9V1KG-7M
      selector:
        entity:
          filter:
            - domain: input_text
      default: input_text.last_call

    notify_service:
      name: Notify service name
      description: Select the name of your notification service, where the notification should be sent.
      selector:
        text: {}
      default: notify.notify

    speak_on:
      name: Spoken Announcement
      description: Switch on, when you want a spoken announcement beside the notification. Requires Blueprint 'webrx-announce.yaml'.
      selector:
        boolean:
      default: true
      
# We need these global variables to use them in templates

variables:
  act_ft8:  !input webrx_ft8
  act_speak_on: !input speak_on
  act_last_call: !input last_call

trigger_variables:
  tvar_callsign_list: !input callsign_list
  tvar_ft8: !input webrx_ft8

trigger:
  - platform: template
    value_template: |-
      {% set calls = (states(tvar_callsign_list)).split(',') %}
      {{ state_attr( tvar_ft8,'callsign') | upper in calls | trim }}
    id: in-callsign-list

condition:
- condition: template
  value_template: >
    {% set td = (as_timestamp(now()) 
       - as_timestamp(state_attr('automation.webrx_callsign_alert','last_triggered')))/60 %}
    {{ state_attr(act_ft8,'callsign') != states(act_last_call) or 
       state_attr(act_ft8,'callsign') == states(act_last_call) and ( td > 30 )
    }}

action:
  - variables:
      call_spelled: |
        {% if act_speak_on %}
        {% from 'macros.jinja' import spell %}
        {{ spell(state_attr(act_ft8, 'callsign')) }}
        {% endif %}
      loc_spelled: |
        {% if act_speak_on %}
        {% from 'macros.jinja' import spell %}
        {{ spell( (state_attr(act_ft8, 'locator'))[0] +
                  (state_attr(act_ft8, 'locator'))[1]   
                ) }}   
        {% endif %}
      freq: |
        {{ states(act_ft8) | int // 1000 }}

    # Notification
  - service: !input notify_service
    data:
      message: >
        Station from call sign list {{ state_attr( act_ft8, 'callsign') 
        }} is active on {{ freq }} MHz! SNR: {{ state_attr( act_ft8, 'db') | int 
        }} dB
      title: OpenWebRX
    enabled: true

    # Store call and freq in input_text helper
    
  - service: input_text.set_value
    target:
      entity_id: !input last_call
    data:
      value: >
        {{ state_attr(act_ft8,'callsign') }}-{{ states(act_ft8)| int //1000 }}M
    
    # Anouncement: requires script blueprint spoken-notification.yaml

  - if:
    - condition: template
      value_template: >
        {{ (states('script.spoken_notification') == 'unknown') and act_speak_on }}
    then:
    - stop: "No announcement or blueprint missing "

    else:
    - service: script.spoken_notification
      data:
        message: |-
          The Station from your call sign list, {{ call_spelled 
          }}, in locator grid {{ loc_spelled 
          }}, is active on {{ freq 
          }} MHz! The signal to noise ratio is {{
           state_attr( act_ft8, 'db') | int }} Decibel.
      enabled: act_speak_on

  - delay:
      hours: 0
      minutes: 2
      seconds: 0
      milliseconds: 0

mode: single
